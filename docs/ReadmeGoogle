🔐 Sistema de Autenticación con Google
📋 Descripción General
Este proyecto implementa un sistema de autenticación con Google utilizando Firebase Authentication. La aplicación frontend (Angular) permite a los usuarios iniciar sesión con su cuenta de Google, mientras que el backend (Spring Boot) valida el token y gestiona la sesión de forma segura.

🏗️ Arquitectura del Sistema

┌─────────────────┐    HTTP/REST    ┌─────────────────┐
│                 │ ──────────────► │                 │
│  Frontend       │                 │  Backend        │
│  (Angular)      │                 │  (Spring Boot)  │
│                 │ ◄────────────── │                 │
└─────────────────┘                 └─────────────────┘
         │                                   │
         ▼                                   ▼
┌─────────────────┐                 ┌─────────────────┐
│ Firebase Auth   │                 │ Firebase Admin  │
│ (Client SDK)    │                 │     (SDK)       │
└─────────────────┘                 └─────────────────┘

🎯 Componentes Principales
Frontend (Angular): Interfaz de usuario y lógica de autenticación con Google.

Backend (Spring Boot): API REST para verificar el token de Firebase.

Firebase Auth: Proveedor de autenticación.

Google OAuth: Proveedor de identidad.

🚀 Implementación del Frontend
📁 Estructura de Archivos
pgsql

src/
├── app/
│   ├── services/
│   │   └── auth-service.service.ts
│   └── components/
│       └── login/
│           ├── login.component.html
│           └── login.component.ts

🔧 Servicio de Autenticación (AuthService)
private baseUrlGoogle = 'http://localhost:8080/tests/google';

async loginWithGoogle() {
  const auth = getAuth();
  const provider = new GoogleAuthProvider();

  try {
    const result = await signInWithPopup(auth, provider);
    const idToken = await result.user.getIdToken();
    return this.http.post(this.baseUrlGoogle, { token: idToken }).toPromise();
  } catch (error) {
    console.error('Error en el login con Google:', error);
    throw error;
  }
}

🔄 Flujo de Autenticación
Popup de Google: Se abre una ventana de autenticación.

Obtención del Token: Firebase emite un ID token JWT.

Envío al Backend: Se envía el token al backend Spring para verificación.

🔗 Manejo de Cuentas Duplicadas (con otros proveedores)

if (error.code === 'auth/account-exists-with-different-credential') {
  const pendingCred = GoogleAuthProvider.credentialFromError(error);
  const email = error.customData?.email;

  if (email) {
    const methods = await fetchSignInMethodsForEmail(auth, email);

    if (methods.includes('github.com')) {
      const githubProvider = new GithubAuthProvider();

      try {
        const githubResult = await signInWithPopup(auth, githubProvider);

        if (pendingCred) {
          const linkResult = await linkWithCredential(githubResult.user, pendingCred);
          const idToken = await linkResult.user.getIdToken();
          return this.http.post(this.baseUrlGoogle, { token: idToken }).toPromise();
        }
      } catch (linkError) {
        console.error('Error al vincular la cuenta de Google:', linkError);
        throw linkError;
      }
    } else {
      console.warn(`El email ${email} ya está registrado con otro proveedor: ${methods.join(', ')}`);
      throw new Error(`El email ${email} ya está registrado con otro proveedor.`);
    }
  }
}

🖱️ Integración en el Componente
HTML (login.component.html):

html

<span (click)="loginGoogle($event)">GOOGLE</span>
TS (login.component.ts):

ts

loginGoogle(event: Event) {
  event.preventDefault();
  this.authService.loginWithGoogle()
    .then(response => {
      console.log('Login exitoso:', response);
    })
    .catch(error => {
      console.error('Error en login:', error);
    });
}

🖥️ Implementación del Backend
📁 Estructura de Archivos
swift

src/main/java/com/example/demo/
├── controllers/
│   └── AuthController.java
└── services/
    └── FirebaseUserService.java

🎯 Controlador REST
java

@PostMapping("/google")
public ResponseEntity<?> authenticateWithGoogle(@RequestBody TokenRequests tokenRequest) {
    logger.info(">>> Iniciando autenticación con Google...");
    logger.debug("Token recibido: {}", tokenRequest.getToken());

    try {
        FirebaseToken decodedToken = FirebaseAuth.getInstance().verifyIdToken(tokenRequest.getToken());
        String uid = decodedToken.getUid();
        String email = decodedToken.getEmail();

        logger.info(">>> Usuario autenticado con Google. UID: {}, Email: {}", uid, email);

        Map<String, String> response = new HashMap<>();
        response.put("message", "Usuario autenticado con Google");
        response.put("email", email);

        return ResponseEntity.ok(response);
    } catch (Exception e) {
        logger.error(">>> Error al verificar token de Google: {}", e.getMessage(), e);
        Map<String, String> errorResponse = new HashMap<>();
        errorResponse.put("error", "Token inválido o expirado.");
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);
    }
}
